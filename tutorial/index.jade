.chapter(data-title='Browser Calls with Twilio and Spark')
  .step(data-file='src/main/java/com/twilio/browsercalls/controllers/TokenController.java')
    :markdown
      ## What does this thing do?

      This [Spark](//sparkjava.com/) web application shows how you can use
      [Twilio Client](//www.twilio.com/client) to make browser-to-phone and
      browser-to-browser calls.

      ![Browser Calls home
      page](//howtodocs.s3.amazonaws.com/browser-calls/browser-calls-home.png)

      This application powers the support site for the Birchwood Bicycle Polo
      Co., which sells equipment to those who play ["the sport of
      kings."](//www.youtube.com/watch?v=DaK9Zj3QHDY) It has three main
      features:

      * Unsatisfied customers can submit support tickets with their phone number
      and their problem.
      * Support agents can call customers' phones from their browser to follow up
      on support tickets.
      * Customers can also use their browser to speak with support agents live
      when available.

      In this tutorial, we'll point out the key bits of code that make this
      application work.
      [Check out the project README on
      GitHub](//github.com/TwilioDevEd/browser-calls-spark) to see how to run
      the code yourself.

      Let's get started! Click the right arrow above to advance to the next
      code snippet.

      ---

      **See also:**

      * [Twilio Java Helper Library](//github.com/twilio/twilio-java/)
      * [Twilio Client docs](//www.twilio.com/docs/client)
      * [Spark Documentation](//sparkjava.com/documentation.html)
      * [Spark Tutorial](//sparktutorials.github.io/)

  .step(data-file='src/main/java/com/twilio/browsercalls/controllers/TicketController.java',
    data-highlight='21-49')
    :markdown
      ## Submit a support ticket

      The home page of our app displays a form for customers to submit support
      tickets. We use
      [Mustache Template Engine](//github.com/spullara/mustache.java)
      to power the page, and this controller to create the ticket.

      ---

      **See also:**

      * [Mustache Template Engine](//mustache.github.io/)
      * [Spark Routes](http://sparkjava.com/documentation.html#routes)

  .step(data-file='src/main/java/com/twilio/browsercalls/models/Ticket.java')
    :markdown
      ## The Support Ticket Model

      A support ticket has just a few fields - a name for the end user, a description
      of the trouble they're having, and a phone number we can use to call them back.

      ---

      **See also:**

      * [Java Persistence API](//docs.oracle.com/javaee/6/tutorial/doc/bnbpz.html)

  .step(data-file='src/main/resources/templates/dashboard.mustache', data-highlight='42-79')
    :markdown
      ## The support dashboard

      When a support agent visits `/dashboard`, they see all the support
      tickets which have been submitted.

      ![Browser Calls support dashboard](//howtodocs.s3.amazonaws.com/browser-calls/browser-calls-dashboard.png)

      Each ticket also has a "Call Customer" button which invokes a JavaScript
      function we wrote named `callCustomer()`. That function kicks off a Twilio
      Client call to the phone number passed as its sole parameter.

  .step(data-file='src/main/java/com/twilio/browsercalls/lib/CapabilityTokenGenerator.java',
    data-highlight='27-60')
    :markdown
      ## Generate a capability token

      Before our users can make calls with Twilio Client in their browser, we
      need to provide them with a capability token.

      We use the [twilio-java](//www.twilio.com/docs/java/install)
      helper library to generate and configure our capability tokens. To allow
      our support agents to call the phone numbers on our tickets, we use an
      `OutgoingClientScope`.

      That method requires an identifier for a
      [TwiML Application](//www.twilio.com/help/faq/twilio-client/how-do-i-create-a-twiml-app).
      Twilio will send a POST request to our backend every time a user makes a
      Twilio Client call — the TwiML Application tells Twilio which URL to send
      that request to.

      ---

      **See also:**

      * [Twilio Client: Capability Tokens](//www.twilio.com/docs/client/capability-tokens)

  .step(data-file='src/main/resources/public/js/browser-calls.js', data-highlight='18-35')
    :markdown
      ## Set up Twilio Client in the Browser

      To use Twilio Client in a web browser we use the
      [twilio.js library](//www.twilio.com/docs/client/twilio-js).

      We start by retrieving a capability token from the controller via Ajax, 
      which uses the capability token generator we saw in the previous step.
      We then enable Twilio Client for this page by passing our token to 
      `Twilio.Device.setup()`.

      The `Twilio.Device.ready()` callback lets us know when the browser is
      ready to make and receive calls.

      ---

      **See also:**

      * [jQuery .post()](//api.jquery.com/jquery.post/)
      * [Twilio.Device.setup()](//www.twilio.com/docs/client/device#setup)
      * [Twilio.Device.ready()](//www.twilio.com/docs/client/device#ready)

  .step(data-file='src/main/resources/public/js/browser-calls.js', data-highlight='97-104')
    :markdown
      ## Call a customer (browser-to-phone)

      When our support agent clicks "Call Customer" on a support ticket, this
      function initiates the call.

      We use `Twilio.Device.connect()` to begin a new outgoing call. Our backend
      will tell Twilio how to handle this call, so we include a `phoneNumber`
      parameter that we'll use in our `call` controller.

      Let's look at that controller next.

      ---

      **See also:**

      * [Twilio.Device.connect()](//www.twilio.com/docs/client/device#connect)

  .step(data-file='src/main/java/com/twilio/browsercalls/controllers/CallController.java', data-highlight='28-59')
    :markdown
      ## Connect the call to a phone number

      Whenever one of our users makes a call, Twilio will send a POST request to
      the URL we set on our TwiML Application - in this case,
      `/call/connect`.

      We use [TwiML](//www.twilio.com/docs/api/twiml) to respond to the
      request and tell Twilio how to handle the call. Twilio will pass along the
      `phoneNumber` parameter from the previous step in its request, which
      we will then [Dial](//www.twilio.com/docs/api/twiml/dial) in our TwiML.

      ---

      **See also:**

      * [<Number> TwiML verb](//www.twilio.com/docs/api/twiml/number)
      * [TwiML creation with twilio-java](//www.twilio.com/docs/quickstart/java/twiml)

  .step(data-file='src/main/resources/public/js/browser-calls.js', data-highlight='53-69')
    :markdown
      ## The call is live

      After our `call` view responds, Twilio completes the connection between
      our support agent's browser and the customer's phone.

      We use the `Twilio.Device.connect()` callback to update some UI elements
      and make it clear our user is in a call. This function receives a
      [Connection](//www.twilio.com/docs/client/connection) object,
      which offers some additional details about the call.

      ---

      **See also:**

      * [Twilio.Device.connect() callback](//www.twilio.com/docs/client/device#connect-handler)
      * [jQuery .prop()](//api.jquery.com/prop/)

  .step(data-file='src/main/resources/public/js/browser-calls.js', 
    data-highlight='106-112')
    :markdown
      ## Call a support agent (browser-to-browser)

      Support tickets are useful, but sometimes a customer needs help right now.
      With just a little more work we let customers speak with a support agent
      live via a browser-to-browser call.

      ![Browser Calls call support](//howtodocs.s3.amazonaws.com/browser-calls/browser-calls-call-support.png)

      When a customer clicks "Call support" on the home page we again use
      `Twilio.Device.connect()` to initiate the call. This time we don't pass
      any additional parameters — our backend will route this call to our
      support agent.

      ---

      **See also:**

      * [Twilio.Device.connect()](//www.twilio.com/docs/client/device#connect)

  .step(data-file='src/main/java/com/twilio/browsercalls/controllers/TokenController.java',
    data-highlight='15-29')
    :markdown
      ## Connect the call to the support agent's client

      To allow our support agents to accept incoming calls we use an
      `IncomingClientScope` when generating their capability token,
      passing `support_agent` as the client's name.

      When Twilio sends a POST request to our `/call/connect` endpoint, we can connect the
      call to our support agent by responding with a
      [<Client>](//www.twilio.com/docs/api/twiml/client) TwiML noun and
      the `support_agent` name.

      ---

      **See also:**

      * [Allow Incoming Connections on Capability Tokens](//www.twilio.com/docs/client/capability-tokens#allow-incoming-connections)

  .step(data-file='src/main/resources/public/js/browser-calls.js', data-highlight='81-95')
    :markdown
      ## Answer the call

      When our support agent's client receives an incoming call, it will trigger
      the function we defined on the `Twilio.Device.incoming()` callback.

      The incoming `connection` will be in a "pending" state until we invoke its
      `.accept()` method, which we do in a function bound to the "Answer
      call" button.

      We also set a `.accept()` callback to update the UI once the call is live.

      ---

      **See also:**

      * [Twilio.Device.incoming()](//www.twilio.com/docs/client/device#incoming)
      * [Twilio.Device.accept()](//www.twilio.com/docs/client/connection#accept)
      * [jQuery .click()](//api.jquery.com/click/)

  .step(data-file='src/main/resources/public/js/browser-calls.js', data-highlight='114-117')
    :markdown
      ## End a call

      To end a call we invoke `Twilio.Device.disconnectAll()`, which we wired
      to the "Hang up" button in our UI.

      ---

      **See also:**

      * [Twilio.Device.disconnectAll()](//www.twilio.com/docs/client/device#disconnect-all)
      * [Twilio.Device.disconnect()](//www.twilio.com/docs/client/device#disconnect)

  .step(data-file='src/main/resources/public/js/browser-calls.js', data-highlight='71-79')
    :markdown
      ## Ending a call when the other end hangs up

      We also define a callback function with `Twilio.Device.disconnect()`
      to reset some UI elements.

      ---

      **See also:**

      * [Twilio.Device.disconnectAll()](//www.twilio.com/docs/client/device#disconnect-all)
      * [Twilio.Device.disconnect()](//www.twilio.com/docs/client/device#disconnect)

  .step(data-file='src/main/resources/public/js/browser-calls.js', data-highlight='42-51')
    :markdown
      ## Check if a support agent is available

      If a customer calls support but no support agent is online, their call
      will go unanswered. To help avoid this frustration, we display a message
      above the "Call support" button when no agent is available:

      ![Browser Calls support unavailable](//howtodocs.s3.amazonaws.com/browser-calls/browser-calls-support-unavailable.png)

      We use `Twilio.Device.presence()` to update this message when the
      support agent's availability changes.

      ---

      **See also:**

      * [Twilio Client .presence()](//www.twilio.com/docs/client/device#presence)

  .step
    :markdown
      ## Where to next?

      That's it! Our Spark application now powers browser-to-phone and
      browser-to-browser calls using Twilio Client.

      If you're a Java developer working with Twilio, you might also enjoy these
      tutorials:

      [**Appointment Reminders**](//www.twilio.com/docs/howto/walkthrough/appointment-reminders/java/spark)

      Schedule appointment reminders to be sent via sms

      [**SMS and MMS Notifications**](//www.twilio.com/docs/howto/walkthrough/server-notifications/java/spark)

      Alert all administrators via SMS when a server outage occurs.

      **Did this help?**

      Thanks for checking out this tutorial! If you have any feedback
      to share with us, we'd love to hear it.
      [Contact the Twilio Developer Education Team](mailto:deved-oss@twilio.com) to let us know what you think.
